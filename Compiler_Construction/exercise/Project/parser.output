Grammar

    0 $accept: START $end

    1 START: global_declaration
    2      | START global_declaration

    3 global_declaration: function_def
    4                   | statement

    5 block: T_GO control_block T_ALL_SET

    6 control_block: if_block
    7              | while_block
    8              | for_block
    9              | switch_case

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

   11 while_block: T_AS_LONG_AS T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

   13 optional_step: T_COMMA expression
   14              | ε

   15 statements: statement ';'
   16           | statements statement ';'

   17 statement: declaration
   18          | assignment
   19          | function_call
   20          | block
   21          | T_SENDBACK expression
   22          | T_THROWUP expression

   23 declaration: types T_IDENTIFIER T_EQUAL expression

   24 assignment: T_IDENTIFIER T_EQUAL expression

   25 types: T_WHOLEY_TYPE
   26      | T_FLOATY_TYPE
   27      | T_STRING_TYPE
   28      | T_ZIP_TYPE

   29 expression: T_WHOLEY
   30           | T_FLOATY
   31           | T_STRING
   32           | T_IDENTIFIER
   33           | T_IDENTIFIER T_NEQUAL expression
   34           | T_IDENTIFIER T_GEQUAL expression
   35           | T_IDENTIFIER T_LEQUAL expression
   36           | T_IDENTIFIER T_PLUS expression
   37           | T_IDENTIFIER T_MINUS expression
   38           | T_IDENTIFIER T_DIVIDE expression
   39           | T_IDENTIFIER T_MULTIPLY expression
   40           | T_IDENTIFIER T_LESS expression
   41           | T_IDENTIFIER T_GREATER expression

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

   43 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN

   44 param_list: expression T_IDENTIFIER
   45           | param_list T_COMMA expression T_IDENTIFIER
   46           | ε

   47 arg_list: expression
   48         | arg_list T_COMMA expression
   49         | ε

   50 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR

   51 case_list: case_list T_IS expression T_COLON statements
   52          | T_DEFAULT T_COLON statements
   53          | ε


Terminals, with rules where they appear

    $end (0) 0
    ';' (59) 15 16
    error (256)
    T_WHOLEY <num> (258) 29
    T_FLOATY <fnum> (259) 30
    T_IDENTIFIER <id> (260) 12 23 24 32 33 34 35 36 37 38 39 40 41 42 43 44 45
    T_STRING <str> (261) 31
    T_PLUS <op> (262) 36
    T_MINUS <op> (263) 37
    T_MULTIPLY <op> (264) 39
    T_DIVIDE <op> (265) 38
    T_LESS <op> (266) 40
    T_GREATER <op> (267) 41
    T_GEQUAL <op> (268) 34
    T_LEQUAL <op> (269) 35
    T_SENDBACK <str> (270) 21
    T_THROWUP <str> (271) 22
    T_GO <str> (272) 5
    T_ALL_SET <str> (273) 5
    T_IMAGINE <str> (274) 10
    T_NAH <str> (275) 10
    T_ONE_BY_ONE <str> (276) 12
    T_AS_LONG_AS <str> (277) 11
    T_IN <str> (278) 12
    T_LPAREN <str> (279) 10 11 12 42 43
    T_RPAREN <str> (280) 10 11 12 42 43
    T_LCURPAR <str> (281) 10 11 12 42 50
    T_RCURPAR <str> (282) 10 11 12 42 50
    T_A_NEW_ONE <str> (283) 42
    T_ZIP_TYPE <str> (284) 28
    T_CHECK <str> (285) 50
    T_IS <str> (286) 51
    T_COLON <str> (287) 51 52
    T_DEFAULT <str> (288) 52
    T_COMMA <str> (289) 13 45 48
    T_WHOLEY_TYPE <str> (290) 25
    T_FLOATY_TYPE <str> (291) 26
    T_STRING_TYPE <str> (292) 27
    T_EQUAL (293) 23 24
    T_NEQUAL (294) 33


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    START (42)
        on left: 1 2
        on right: 0 2
    global_declaration <ast> (43)
        on left: 3 4
        on right: 1 2
    block <ast> (44)
        on left: 5
        on right: 20
    control_block <ast> (45)
        on left: 6 7 8 9
        on right: 5
    if_block <ast> (46)
        on left: 10
        on right: 6
    while_block <ast> (47)
        on left: 11
        on right: 7
    for_block <ast> (48)
        on left: 12
        on right: 8
    optional_step <ast> (49)
        on left: 13 14
        on right: 12
    statements <ast> (50)
        on left: 15 16
        on right: 10 11 12 16 42 51 52
    statement <ast> (51)
        on left: 17 18 19 20 21 22
        on right: 4 15 16
    declaration <ast> (52)
        on left: 23
        on right: 17
    assignment <ast> (53)
        on left: 24
        on right: 18
    types <ast> (54)
        on left: 25 26 27 28
        on right: 23 42
    expression <ast> (55)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 10 11 12 13 21 22 23 24 33 34 35 36 37 38 39 40 41 44 45 47 48 50 51
    function_def <ast> (56)
        on left: 42
        on right: 3
    function_call <ast> (57)
        on left: 43
        on right: 19
    param_list <ast> (58)
        on left: 44 45 46
        on right: 42 45
    arg_list <ast> (59)
        on left: 47 48 49
        on right: 43 48
    switch_case <ast> (60)
        on left: 50
        on right: 9
    case_list <ast> (61)
        on left: 51 52 53
        on right: 50 51


State 0

    0 $accept: • START $end

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    START               go to state 10
    global_declaration  go to state 11
    block               go to state 12
    statement           go to state 13
    declaration         go to state 14
    assignment          go to state 15
    types               go to state 16
    function_def        go to state 17
    function_call       go to state 18


State 1

   24 assignment: T_IDENTIFIER • T_EQUAL expression
   43 function_call: T_IDENTIFIER • T_LPAREN arg_list T_RPAREN

    T_LPAREN  shift, and go to state 19
    T_EQUAL   shift, and go to state 20


State 2

   21 statement: T_SENDBACK • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 25


State 3

   22 statement: T_THROWUP • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 26


State 4

    5 block: T_GO • control_block T_ALL_SET

    T_IMAGINE     shift, and go to state 27
    T_ONE_BY_ONE  shift, and go to state 28
    T_AS_LONG_AS  shift, and go to state 29
    T_CHECK       shift, and go to state 30

    control_block  go to state 31
    if_block       go to state 32
    while_block    go to state 33
    for_block      go to state 34
    switch_case    go to state 35


State 5

   42 function_def: T_A_NEW_ONE • types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    types  go to state 36


State 6

   28 types: T_ZIP_TYPE •

    $default  reduce using rule 28 (types)


State 7

   25 types: T_WHOLEY_TYPE •

    $default  reduce using rule 25 (types)


State 8

   26 types: T_FLOATY_TYPE •

    $default  reduce using rule 26 (types)


State 9

   27 types: T_STRING_TYPE •

    $default  reduce using rule 27 (types)


State 10

    0 $accept: START • $end
    2 START: START • global_declaration

    $end           shift, and go to state 37
    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    global_declaration  go to state 38
    block               go to state 12
    statement           go to state 13
    declaration         go to state 14
    assignment          go to state 15
    types               go to state 16
    function_def        go to state 17
    function_call       go to state 18


State 11

    1 START: global_declaration •

    $default  reduce using rule 1 (START)


State 12

   20 statement: block •

    $default  reduce using rule 20 (statement)


State 13

    4 global_declaration: statement •

    $default  reduce using rule 4 (global_declaration)


State 14

   17 statement: declaration •

    $default  reduce using rule 17 (statement)


State 15

   18 statement: assignment •

    $default  reduce using rule 18 (statement)


State 16

   23 declaration: types • T_IDENTIFIER T_EQUAL expression

    T_IDENTIFIER  shift, and go to state 39


State 17

    3 global_declaration: function_def •

    $default  reduce using rule 3 (global_declaration)


State 18

   19 statement: function_call •

    $default  reduce using rule 19 (statement)


State 19

   43 function_call: T_IDENTIFIER T_LPAREN • arg_list T_RPAREN

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    $default  reduce using rule 49 (arg_list)

    expression  go to state 40
    arg_list    go to state 41


State 20

   24 assignment: T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 42


State 21

   29 expression: T_WHOLEY •

    $default  reduce using rule 29 (expression)


State 22

   30 expression: T_FLOATY •

    $default  reduce using rule 30 (expression)


State 23

   32 expression: T_IDENTIFIER •
   33           | T_IDENTIFIER • T_NEQUAL expression
   34           | T_IDENTIFIER • T_GEQUAL expression
   35           | T_IDENTIFIER • T_LEQUAL expression
   36           | T_IDENTIFIER • T_PLUS expression
   37           | T_IDENTIFIER • T_MINUS expression
   38           | T_IDENTIFIER • T_DIVIDE expression
   39           | T_IDENTIFIER • T_MULTIPLY expression
   40           | T_IDENTIFIER • T_LESS expression
   41           | T_IDENTIFIER • T_GREATER expression

    T_PLUS      shift, and go to state 43
    T_MINUS     shift, and go to state 44
    T_MULTIPLY  shift, and go to state 45
    T_DIVIDE    shift, and go to state 46
    T_LESS      shift, and go to state 47
    T_GREATER   shift, and go to state 48
    T_GEQUAL    shift, and go to state 49
    T_LEQUAL    shift, and go to state 50
    T_NEQUAL    shift, and go to state 51

    $default  reduce using rule 32 (expression)


State 24

   31 expression: T_STRING •

    $default  reduce using rule 31 (expression)


State 25

   21 statement: T_SENDBACK expression •

    $default  reduce using rule 21 (statement)


State 26

   22 statement: T_THROWUP expression •

    $default  reduce using rule 22 (statement)


State 27

   10 if_block: T_IMAGINE • T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 52


State 28

   12 for_block: T_ONE_BY_ONE • T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 53


State 29

   11 while_block: T_AS_LONG_AS • T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 54


State 30

   50 switch_case: T_CHECK • expression T_LCURPAR case_list T_RCURPAR

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 55


State 31

    5 block: T_GO control_block • T_ALL_SET

    T_ALL_SET  shift, and go to state 56


State 32

    6 control_block: if_block •

    $default  reduce using rule 6 (control_block)


State 33

    7 control_block: while_block •

    $default  reduce using rule 7 (control_block)


State 34

    8 control_block: for_block •

    $default  reduce using rule 8 (control_block)


State 35

    9 control_block: switch_case •

    $default  reduce using rule 9 (control_block)


State 36

   42 function_def: T_A_NEW_ONE types • T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 57


State 37

    0 $accept: START $end •

    $default  accept


State 38

    2 START: START global_declaration •

    $default  reduce using rule 2 (START)


State 39

   23 declaration: types T_IDENTIFIER • T_EQUAL expression

    T_EQUAL  shift, and go to state 58


State 40

   47 arg_list: expression •

    $default  reduce using rule 47 (arg_list)


State 41

   43 function_call: T_IDENTIFIER T_LPAREN arg_list • T_RPAREN
   48 arg_list: arg_list • T_COMMA expression

    T_RPAREN  shift, and go to state 59
    T_COMMA   shift, and go to state 60


State 42

   24 assignment: T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 24 (assignment)


State 43

   36 expression: T_IDENTIFIER T_PLUS • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 61


State 44

   37 expression: T_IDENTIFIER T_MINUS • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 62


State 45

   39 expression: T_IDENTIFIER T_MULTIPLY • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 63


State 46

   38 expression: T_IDENTIFIER T_DIVIDE • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 64


State 47

   40 expression: T_IDENTIFIER T_LESS • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 65


State 48

   41 expression: T_IDENTIFIER T_GREATER • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 66


State 49

   34 expression: T_IDENTIFIER T_GEQUAL • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 67


State 50

   35 expression: T_IDENTIFIER T_LEQUAL • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 68


State 51

   33 expression: T_IDENTIFIER T_NEQUAL • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 69


State 52

   10 if_block: T_IMAGINE T_LPAREN • expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 70


State 53

   12 for_block: T_ONE_BY_ONE T_LPAREN • T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 71


State 54

   11 while_block: T_AS_LONG_AS T_LPAREN • expression T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 72


State 55

   50 switch_case: T_CHECK expression • T_LCURPAR case_list T_RCURPAR

    T_LCURPAR  shift, and go to state 73


State 56

    5 block: T_GO control_block T_ALL_SET •

    $default  reduce using rule 5 (block)


State 57

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER • T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 74


State 58

   23 declaration: types T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 75


State 59

   43 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN •

    $default  reduce using rule 43 (function_call)


State 60

   48 arg_list: arg_list T_COMMA • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 76


State 61

   36 expression: T_IDENTIFIER T_PLUS expression •

    $default  reduce using rule 36 (expression)


State 62

   37 expression: T_IDENTIFIER T_MINUS expression •

    $default  reduce using rule 37 (expression)


State 63

   39 expression: T_IDENTIFIER T_MULTIPLY expression •

    $default  reduce using rule 39 (expression)


State 64

   38 expression: T_IDENTIFIER T_DIVIDE expression •

    $default  reduce using rule 38 (expression)


State 65

   40 expression: T_IDENTIFIER T_LESS expression •

    $default  reduce using rule 40 (expression)


State 66

   41 expression: T_IDENTIFIER T_GREATER expression •

    $default  reduce using rule 41 (expression)


State 67

   34 expression: T_IDENTIFIER T_GEQUAL expression •

    $default  reduce using rule 34 (expression)


State 68

   35 expression: T_IDENTIFIER T_LEQUAL expression •

    $default  reduce using rule 35 (expression)


State 69

   33 expression: T_IDENTIFIER T_NEQUAL expression •

    $default  reduce using rule 33 (expression)


State 70

   10 if_block: T_IMAGINE T_LPAREN expression • T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 77


State 71

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER • T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IN  shift, and go to state 78


State 72

   11 while_block: T_AS_LONG_AS T_LPAREN expression • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 79


State 73

   50 switch_case: T_CHECK expression T_LCURPAR • case_list T_RCURPAR

    T_DEFAULT  shift, and go to state 80

    $default  reduce using rule 53 (case_list)

    case_list  go to state 81


State 74

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN • param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    $default  reduce using rule 46 (param_list)

    expression  go to state 82
    param_list  go to state 83


State 75

   23 declaration: types T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 23 (declaration)


State 76

   48 arg_list: arg_list T_COMMA expression •

    $default  reduce using rule 48 (arg_list)


State 77

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN • T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 84


State 78

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN • T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 85


State 79

   11 while_block: T_AS_LONG_AS T_LPAREN expression T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 86


State 80

   52 case_list: T_DEFAULT • T_COLON statements

    T_COLON  shift, and go to state 87


State 81

   50 switch_case: T_CHECK expression T_LCURPAR case_list • T_RCURPAR
   51 case_list: case_list • T_IS expression T_COLON statements

    T_RCURPAR  shift, and go to state 88
    T_IS       shift, and go to state 89


State 82

   44 param_list: expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 90


State 83

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list • T_RPAREN T_LCURPAR statements T_RCURPAR
   45 param_list: param_list • T_COMMA expression T_IDENTIFIER

    T_RPAREN  shift, and go to state 91
    T_COMMA   shift, and go to state 92


State 84

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR • statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 93
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 85

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN • expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 95


State 86

   11 while_block: T_AS_LONG_AS T_LPAREN expression T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 96
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 87

   52 case_list: T_DEFAULT T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 97
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 88

   50 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR •

    $default  reduce using rule 50 (switch_case)


State 89

   51 case_list: case_list T_IS • expression T_COLON statements

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 98


State 90

   44 param_list: expression T_IDENTIFIER •

    $default  reduce using rule 44 (param_list)


State 91

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 99


State 92

   45 param_list: param_list T_COMMA • expression T_IDENTIFIER

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 100


State 93

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements • T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 101
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 94

   15 statements: statement • ';'

    ';'  shift, and go to state 103


State 95

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression • optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_COMMA  shift, and go to state 104

    $default  reduce using rule 14 (optional_step)

    optional_step  go to state 105


State 96

   11 while_block: T_AS_LONG_AS T_LPAREN expression T_RPAREN T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 106
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 97

   16 statements: statements • statement ';'
   52 case_list: T_DEFAULT T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    $default  reduce using rule 52 (case_list)

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 98

   51 case_list: case_list T_IS expression • T_COLON statements

    T_COLON  shift, and go to state 107


State 99

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 108
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 100

   45 param_list: param_list T_COMMA expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 109


State 101

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR • T_NAH T_LCURPAR statements T_RCURPAR

    T_NAH  shift, and go to state 110


State 102

   16 statements: statements statement • ';'

    ';'  shift, and go to state 111


State 103

   15 statements: statement ';' •

    $default  reduce using rule 15 (statements)


State 104

   13 optional_step: T_COMMA • expression

    T_WHOLEY      shift, and go to state 21
    T_FLOATY      shift, and go to state 22
    T_IDENTIFIER  shift, and go to state 23
    T_STRING      shift, and go to state 24

    expression  go to state 112


State 105

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step • T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 113


State 106

   11 while_block: T_AS_LONG_AS T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 11 (while_block)


State 107

   51 case_list: case_list T_IS expression T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 114
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 108

   16 statements: statements • statement ';'
   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements • T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 115
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 109

   45 param_list: param_list T_COMMA expression T_IDENTIFIER •

    $default  reduce using rule 45 (param_list)


State 110

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 116


State 111

   16 statements: statements statement ';' •

    $default  reduce using rule 16 (statements)


State 112

   13 optional_step: T_COMMA expression •

    $default  reduce using rule 13 (optional_step)


State 113

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 117


State 114

   16 statements: statements • statement ';'
   51 case_list: case_list T_IS expression T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    $default  reduce using rule 51 (case_list)

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 115

   42 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 42 (function_def)


State 116

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 118
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 117

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 119


State 118

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 120
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 119

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statements     go to state 121
    statement      go to state 94
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 120

   10 if_block: T_IMAGINE T_LPAREN expression T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 10 (if_block)


State 121

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 122
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    block          go to state 12
    statement      go to state 102
    declaration    go to state 14
    assignment     go to state 15
    types          go to state 16
    function_call  go to state 18


State 122

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 12 (for_block)
