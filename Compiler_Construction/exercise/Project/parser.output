Grammar

    0 $accept: START $end

    1 START: global_declaration
    2      | START global_declaration

    3 global_declaration: function_def
    4                   | statements ';'

    5 block: T_GO control_block T_ALL_SET

    6 control_block: if_block
    7              | while_block
    8              | for_block
    9              | switch_case

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

   14 optional_step: ',' expression
   15              | ε

   16 statements: statement
   17           | statements statement

   18 statement: assignment ';'
   19          | function_call ';'
   20          | block
   21          | T_SENDBACK expression ';'
   22          | T_THROWUP expression ';'

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';'
   24           | T_FLOATY_TYPE T_IDENTIFIER T_EQUAL expression ';'
   25           | T_STRING_TYPE T_IDENTIFIER T_EQUAL expression ';'

   26 condition: expression

   27 expression: T_WHOLEY
   28           | T_FLOATY
   29           | T_ZIP
   30           | T_STRING
   31           | T_IDENTIFIER
   32           | T_IDENTIFIER T_NEQUAL expression
   33           | T_IDENTIFIER T_GEQUAL expression
   34           | T_IDENTIFIER T_LEQUAL expression
   35           | T_IDENTIFIER T_OPERATOR expression

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

   37 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN

   38 param_list: expression T_IDENTIFIER
   39           | param_list T_COMMA expression T_IDENTIFIER
   40           | ε

   41 arg_list: expression
   42         | arg_list T_COMMA expression
   43         | ε

   44 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR

   45 case_list: case_list T_IS expression T_COLON statements
   46          | T_DEFAULT T_COLON statements
   47          | ε


Terminals, with rules where they appear

    $end (0) 0
    ',' (44) 14
    ';' (59) 4 18 19 21 22 23 24 25
    error (256)
    T_WHOLEY (258) 27
    T_FLOATY (259) 28
    T_IDENTIFIER (260) 13 23 24 25 31 32 33 34 35 36 37 38 39
    T_OPERATOR (261) 35
    T_STRING (262) 30
    T_SENDBACK (263) 21
    T_THROWUP (264) 22
    T_GO (265) 5
    T_ALL_SET (266) 5
    T_IMAGINE (267) 10 11
    T_NAH (268) 11
    T_ONE_BY_ONE (269) 13
    T_AS_LONG_AS (270) 12
    T_EQUAL (271) 23 24 25
    T_NEQUAL (272) 32
    T_GEQUAL (273) 33
    T_LEQUAL (274) 34
    T_IN (275) 13
    T_LPAREN (276) 10 11 12 13 36 37
    T_RPAREN (277) 10 11 12 13 36 37
    T_LCURPAR (278) 10 11 12 13 36 44
    T_RCURPAR (279) 10 11 12 13 36 44
    T_A_NEW_ONE (280) 36
    T_ZIP (281) 29
    T_CHECK (282) 44
    T_IS (283) 45
    T_COLON (284) 45 46
    T_DEFAULT (285) 46
    T_COMMA (286) 39 42
    T_WHOLEY_TYPE (287) 23
    T_FLOATY_TYPE (288) 24
    T_STRING_TYPE (289) 25


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    START (38)
        on left: 1 2
        on right: 0 2
    global_declaration (39)
        on left: 3 4
        on right: 1 2
    block (40)
        on left: 5
        on right: 20
    control_block (41)
        on left: 6 7 8 9
        on right: 5
    if_block (42)
        on left: 10 11
        on right: 6
    while_block (43)
        on left: 12
        on right: 7
    for_block (44)
        on left: 13
        on right: 8
    optional_step (45)
        on left: 14 15
        on right: 13
    statements (46)
        on left: 16 17
        on right: 4 10 11 12 13 17 36 45 46
    statement (47)
        on left: 18 19 20 21 22
        on right: 16 17
    assignment (48)
        on left: 23 24 25
        on right: 18
    condition (49)
        on left: 26
        on right: 10 11 12
    expression (50)
        on left: 27 28 29 30 31 32 33 34 35
        on right: 13 14 21 22 23 24 25 26 32 33 34 35 36 38 39 41 42 44 45
    function_def (51)
        on left: 36
        on right: 3
    function_call (52)
        on left: 37
        on right: 19
    param_list (53)
        on left: 38 39 40
        on right: 36 39
    arg_list (54)
        on left: 41 42 43
        on right: 37 42
    switch_case (55)
        on left: 44
        on right: 9
    case_list (56)
        on left: 45 46 47
        on right: 44 45


State 0

    0 $accept: • START $end

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    START               go to state 8
    global_declaration  go to state 9
    block               go to state 10
    statements          go to state 11
    statement           go to state 12
    assignment          go to state 13
    function_def        go to state 14
    function_call       go to state 15


State 1

   23 assignment: T_IDENTIFIER • T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';'
   37 function_call: T_IDENTIFIER • T_LPAREN arg_list T_RPAREN

    T_EQUAL   shift, and go to state 16
    T_LPAREN  shift, and go to state 17


State 2

   21 statement: T_SENDBACK • expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 23


State 3

   22 statement: T_THROWUP • expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 24


State 4

    5 block: T_GO • control_block T_ALL_SET

    T_IMAGINE     shift, and go to state 25
    T_ONE_BY_ONE  shift, and go to state 26
    T_AS_LONG_AS  shift, and go to state 27
    T_CHECK       shift, and go to state 28

    control_block  go to state 29
    if_block       go to state 30
    while_block    go to state 31
    for_block      go to state 32
    switch_case    go to state 33


State 5

   36 function_def: T_A_NEW_ONE • expression T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 34


State 6

   24 assignment: T_FLOATY_TYPE • T_IDENTIFIER T_EQUAL expression ';'

    T_IDENTIFIER  shift, and go to state 35


State 7

   25 assignment: T_STRING_TYPE • T_IDENTIFIER T_EQUAL expression ';'

    T_IDENTIFIER  shift, and go to state 36


State 8

    0 $accept: START • $end
    2 START: START • global_declaration

    $end           shift, and go to state 37
    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    global_declaration  go to state 38
    block               go to state 10
    statements          go to state 11
    statement           go to state 12
    assignment          go to state 13
    function_def        go to state 14
    function_call       go to state 15


State 9

    1 START: global_declaration •

    $default  reduce using rule 1 (START)


State 10

   20 statement: block •

    $default  reduce using rule 20 (statement)


State 11

    4 global_declaration: statements • ';'
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7
    ';'            shift, and go to state 39

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 12

   16 statements: statement •

    $default  reduce using rule 16 (statements)


State 13

   18 statement: assignment • ';'

    ';'  shift, and go to state 41


State 14

    3 global_declaration: function_def •

    $default  reduce using rule 3 (global_declaration)


State 15

   19 statement: function_call • ';'

    ';'  shift, and go to state 42


State 16

   23 assignment: T_IDENTIFIER T_EQUAL • expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 43


State 17

   37 function_call: T_IDENTIFIER T_LPAREN • arg_list T_RPAREN

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    $default  reduce using rule 43 (arg_list)

    expression  go to state 44
    arg_list    go to state 45


State 18

   27 expression: T_WHOLEY •

    $default  reduce using rule 27 (expression)


State 19

   28 expression: T_FLOATY •

    $default  reduce using rule 28 (expression)


State 20

   31 expression: T_IDENTIFIER •
   32           | T_IDENTIFIER • T_NEQUAL expression
   33           | T_IDENTIFIER • T_GEQUAL expression
   34           | T_IDENTIFIER • T_LEQUAL expression
   35           | T_IDENTIFIER • T_OPERATOR expression

    T_OPERATOR  shift, and go to state 46
    T_NEQUAL    shift, and go to state 47
    T_GEQUAL    shift, and go to state 48
    T_LEQUAL    shift, and go to state 49

    $default  reduce using rule 31 (expression)


State 21

   30 expression: T_STRING •

    $default  reduce using rule 30 (expression)


State 22

   29 expression: T_ZIP •

    $default  reduce using rule 29 (expression)


State 23

   21 statement: T_SENDBACK expression • ';'

    ';'  shift, and go to state 50


State 24

   22 statement: T_THROWUP expression • ';'

    ';'  shift, and go to state 51


State 25

   10 if_block: T_IMAGINE • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 52


State 26

   13 for_block: T_ONE_BY_ONE • T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 53


State 27

   12 while_block: T_AS_LONG_AS • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 54


State 28

   44 switch_case: T_CHECK • expression T_LCURPAR case_list T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 55


State 29

    5 block: T_GO control_block • T_ALL_SET

    T_ALL_SET  shift, and go to state 56


State 30

    6 control_block: if_block •

    $default  reduce using rule 6 (control_block)


State 31

    7 control_block: while_block •

    $default  reduce using rule 7 (control_block)


State 32

    8 control_block: for_block •

    $default  reduce using rule 8 (control_block)


State 33

    9 control_block: switch_case •

    $default  reduce using rule 9 (control_block)


State 34

   36 function_def: T_A_NEW_ONE expression • T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 57


State 35

   24 assignment: T_FLOATY_TYPE T_IDENTIFIER • T_EQUAL expression ';'

    T_EQUAL  shift, and go to state 58


State 36

   25 assignment: T_STRING_TYPE T_IDENTIFIER • T_EQUAL expression ';'

    T_EQUAL  shift, and go to state 59


State 37

    0 $accept: START $end •

    $default  accept


State 38

    2 START: START global_declaration •

    $default  reduce using rule 2 (START)


State 39

    4 global_declaration: statements ';' •

    $default  reduce using rule 4 (global_declaration)


State 40

   17 statements: statements statement •

    $default  reduce using rule 17 (statements)


State 41

   18 statement: assignment ';' •

    $default  reduce using rule 18 (statement)


State 42

   19 statement: function_call ';' •

    $default  reduce using rule 19 (statement)


State 43

   23 assignment: T_IDENTIFIER T_EQUAL expression • ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';'

    ';'  shift, and go to state 60


State 44

   41 arg_list: expression •

    $default  reduce using rule 41 (arg_list)


State 45

   37 function_call: T_IDENTIFIER T_LPAREN arg_list • T_RPAREN
   42 arg_list: arg_list • T_COMMA expression

    T_RPAREN  shift, and go to state 61
    T_COMMA   shift, and go to state 62


State 46

   35 expression: T_IDENTIFIER T_OPERATOR • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 63


State 47

   32 expression: T_IDENTIFIER T_NEQUAL • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 64


State 48

   33 expression: T_IDENTIFIER T_GEQUAL • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 65


State 49

   34 expression: T_IDENTIFIER T_LEQUAL • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 66


State 50

   21 statement: T_SENDBACK expression ';' •

    $default  reduce using rule 21 (statement)


State 51

   22 statement: T_THROWUP expression ';' •

    $default  reduce using rule 22 (statement)


State 52

   10 if_block: T_IMAGINE T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    condition   go to state 67
    expression  go to state 68


State 53

   13 for_block: T_ONE_BY_ONE T_LPAREN • T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 69


State 54

   12 while_block: T_AS_LONG_AS T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    condition   go to state 70
    expression  go to state 68


State 55

   44 switch_case: T_CHECK expression • T_LCURPAR case_list T_RCURPAR

    T_LCURPAR  shift, and go to state 71


State 56

    5 block: T_GO control_block T_ALL_SET •

    $default  reduce using rule 5 (block)


State 57

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER • T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 72


State 58

   24 assignment: T_FLOATY_TYPE T_IDENTIFIER T_EQUAL • expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 73


State 59

   25 assignment: T_STRING_TYPE T_IDENTIFIER T_EQUAL • expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 74


State 60

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' • T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';'

    T_WHOLEY_TYPE  shift, and go to state 75


State 61

   37 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN •

    $default  reduce using rule 37 (function_call)


State 62

   42 arg_list: arg_list T_COMMA • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 76


State 63

   35 expression: T_IDENTIFIER T_OPERATOR expression •

    $default  reduce using rule 35 (expression)


State 64

   32 expression: T_IDENTIFIER T_NEQUAL expression •

    $default  reduce using rule 32 (expression)


State 65

   33 expression: T_IDENTIFIER T_GEQUAL expression •

    $default  reduce using rule 33 (expression)


State 66

   34 expression: T_IDENTIFIER T_LEQUAL expression •

    $default  reduce using rule 34 (expression)


State 67

   10 if_block: T_IMAGINE T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 77


State 68

   26 condition: expression •

    $default  reduce using rule 26 (condition)


State 69

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER • T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IN  shift, and go to state 78


State 70

   12 while_block: T_AS_LONG_AS T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 79


State 71

   44 switch_case: T_CHECK expression T_LCURPAR • case_list T_RCURPAR

    T_DEFAULT  shift, and go to state 80

    $default  reduce using rule 47 (case_list)

    case_list  go to state 81


State 72

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN • param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    $default  reduce using rule 40 (param_list)

    expression  go to state 82
    param_list  go to state 83


State 73

   24 assignment: T_FLOATY_TYPE T_IDENTIFIER T_EQUAL expression • ';'

    ';'  shift, and go to state 84


State 74

   25 assignment: T_STRING_TYPE T_IDENTIFIER T_EQUAL expression • ';'

    ';'  shift, and go to state 85


State 75

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE • T_IDENTIFIER T_EQUAL expression ';'

    T_IDENTIFIER  shift, and go to state 86


State 76

   42 arg_list: arg_list T_COMMA expression •

    $default  reduce using rule 42 (arg_list)


State 77

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 87


State 78

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN • T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 88


State 79

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 89


State 80

   46 case_list: T_DEFAULT • T_COLON statements

    T_COLON  shift, and go to state 90


State 81

   44 switch_case: T_CHECK expression T_LCURPAR case_list • T_RCURPAR
   45 case_list: case_list • T_IS expression T_COLON statements

    T_RCURPAR  shift, and go to state 91
    T_IS       shift, and go to state 92


State 82

   38 param_list: expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 93


State 83

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list • T_RPAREN T_LCURPAR statements T_RCURPAR
   39 param_list: param_list • T_COMMA expression T_IDENTIFIER

    T_RPAREN  shift, and go to state 94
    T_COMMA   shift, and go to state 95


State 84

   24 assignment: T_FLOATY_TYPE T_IDENTIFIER T_EQUAL expression ';' •

    $default  reduce using rule 24 (assignment)


State 85

   25 assignment: T_STRING_TYPE T_IDENTIFIER T_EQUAL expression ';' •

    $default  reduce using rule 25 (assignment)


State 86

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER • T_EQUAL expression ';'

    T_EQUAL  shift, and go to state 96


State 87

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 97
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 88

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN • expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 98


State 89

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 99
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 90

   46 case_list: T_DEFAULT T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 100
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 91

   44 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR •

    $default  reduce using rule 44 (switch_case)


State 92

   45 case_list: case_list T_IS • expression T_COLON statements

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 101


State 93

   38 param_list: expression T_IDENTIFIER •

    $default  reduce using rule 38 (param_list)


State 94

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 102


State 95

   39 param_list: param_list T_COMMA • expression T_IDENTIFIER

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 103


State 96

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL • expression ';'

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 104


State 97

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 105
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 98

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression • optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    ','  shift, and go to state 106

    $default  reduce using rule 15 (optional_step)

    optional_step  go to state 107


State 99

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 108
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 100

   17 statements: statements • statement
   46 case_list: T_DEFAULT T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    $default  reduce using rule 46 (case_list)

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 101

   45 case_list: case_list T_IS expression • T_COLON statements

    T_COLON  shift, and go to state 109


State 102

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 110
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 103

   39 param_list: param_list T_COMMA expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 111


State 104

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression • ';'

    ';'  shift, and go to state 112


State 105

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR •
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR • T_NAH T_LCURPAR statements T_RCURPAR

    T_NAH  shift, and go to state 113

    $default  reduce using rule 10 (if_block)


State 106

   14 optional_step: ',' • expression

    T_WHOLEY      shift, and go to state 18
    T_FLOATY      shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20
    T_STRING      shift, and go to state 21
    T_ZIP         shift, and go to state 22

    expression  go to state 114


State 107

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step • T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 115


State 108

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 12 (while_block)


State 109

   45 case_list: case_list T_IS expression T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 116
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 110

   17 statements: statements • statement
   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements • T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 117
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 111

   39 param_list: param_list T_COMMA expression T_IDENTIFIER •

    $default  reduce using rule 39 (param_list)


State 112

   23 assignment: T_IDENTIFIER T_EQUAL expression ';' T_WHOLEY_TYPE T_IDENTIFIER T_EQUAL expression ';' •

    $default  reduce using rule 23 (assignment)


State 113

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 118


State 114

   14 optional_step: ',' expression •

    $default  reduce using rule 14 (optional_step)


State 115

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 119


State 116

   17 statements: statements • statement
   45 case_list: case_list T_IS expression T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    $default  reduce using rule 45 (case_list)

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 117

   36 function_def: T_A_NEW_ONE expression T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 36 (function_def)


State 118

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 120
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 119

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 121


State 120

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 122
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 121

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statements     go to state 123
    statement      go to state 12
    assignment     go to state 13
    function_call  go to state 15


State 122

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 11 (if_block)


State 123

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 124
    T_FLOATY_TYPE  shift, and go to state 6
    T_STRING_TYPE  shift, and go to state 7

    block          go to state 10
    statement      go to state 40
    assignment     go to state 13
    function_call  go to state 15


State 124

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 13 (for_block)
