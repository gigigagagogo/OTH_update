State 0 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce
State 13 conflicts: 8 shift/reduce, 1 reduce/reduce
State 79 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 107 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce


Grammar

    0 $accept: START $end

    1 START: global_declaration
    2      | START global_declaration

    3 global_declaration: function_def
    4                   | statements

    5 block: T_GO control_block T_ALL_SET

    6 control_block: if_block
    7              | while_block
    8              | for_block
    9              | switch_case

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

   11 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

   13 optional_step: ',' expression
   14              | ε

   15 statements: statement ';'
   16           | statements statement ';'

   17 statement: declaration
   18          | assignment
   19          | function_call
   20          | block
   21          | T_SENDBACK expression
   22          | T_THROWUP expression

   23 declaration: types T_IDENTIFIER T_EQUAL expression

   24 assignment: T_IDENTIFIER T_EQUAL expression

   25 types: ε
   26      | T_WHOLEY_TYPE
   27      | T_FLOATY_TYPE
   28      | T_STRING_TYPE
   29      | T_ZIP_TYPE

   30 condition: expression

   31 expression: T_WHOLEY
   32           | T_FLOATY
   33           | T_STRING
   34           | T_IDENTIFIER
   35           | T_IDENTIFIER T_NEQUAL expression
   36           | T_IDENTIFIER T_GEQUAL expression
   37           | T_IDENTIFIER T_LEQUAL expression
   38           | T_IDENTIFIER T_OPERATOR expression

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

   40 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN

   41 param_list: expression T_IDENTIFIER
   42           | param_list T_COMMA expression T_IDENTIFIER
   43           | ε

   44 arg_list: expression
   45         | arg_list T_COMMA expression
   46         | ε

   47 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR

   48 case_list: case_list T_IS expression T_COLON statements
   49          | T_DEFAULT T_COLON statements
   50          | ε


Terminals, with rules where they appear

    $end (0) 0
    ',' (44) 13
    ';' (59) 15 16
    error (256)
    T_WHOLEY <num> (258) 31
    T_FLOATY <fnum> (259) 32
    T_IDENTIFIER <id> (260) 12 23 24 34 35 36 37 38 39 40 41 42
    T_OPERATOR <op> (261) 38
    T_STRING <str> (262) 33
    T_SENDBACK <str> (263) 21
    T_THROWUP <str> (264) 22
    T_GO <str> (265) 5
    T_ALL_SET <str> (266) 5
    T_IMAGINE <str> (267) 10
    T_NAH <str> (268) 10
    T_ONE_BY_ONE <str> (269) 12
    T_AS_LONG_AS <str> (270) 11
    T_EQUAL <str> (271) 23 24
    T_NEQUAL <str> (272) 35
    T_GEQUAL <str> (273) 36
    T_LEQUAL <str> (274) 37
    T_IN <str> (275) 12
    T_LPAREN <str> (276) 10 11 12 39 40
    T_RPAREN <str> (277) 10 11 12 39 40
    T_LCURPAR <str> (278) 10 11 12 39 47
    T_RCURPAR <str> (279) 10 11 12 39 47
    T_A_NEW_ONE <str> (280) 39
    T_ZIP_TYPE <str> (281) 29
    T_CHECK <str> (282) 47
    T_IS <str> (283) 48
    T_COLON <str> (284) 48 49
    T_DEFAULT <str> (285) 49
    T_COMMA <str> (286) 42 45
    T_WHOLEY_TYPE <str> (287) 26
    T_FLOATY_TYPE <str> (288) 27
    T_STRING_TYPE <str> (289) 28


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    START (38)
        on left: 1 2
        on right: 0 2
    global_declaration (39)
        on left: 3 4
        on right: 1 2
    block (40)
        on left: 5
        on right: 20
    control_block (41)
        on left: 6 7 8 9
        on right: 5
    if_block <ast> (42)
        on left: 10
        on right: 6
    while_block <ast> (43)
        on left: 11
        on right: 7
    for_block (44)
        on left: 12
        on right: 8
    optional_step (45)
        on left: 13 14
        on right: 12
    statements <ast> (46)
        on left: 15 16
        on right: 4 10 11 12 16 39 48 49
    statement <ast> (47)
        on left: 17 18 19 20 21 22
        on right: 15 16
    declaration <ast> (48)
        on left: 23
        on right: 17
    assignment <ast> (49)
        on left: 24
        on right: 18
    types <ast> (50)
        on left: 25 26 27 28 29
        on right: 23 39
    condition <ast> (51)
        on left: 30
        on right: 10 11
    expression <ast> (52)
        on left: 31 32 33 34 35 36 37 38
        on right: 12 13 21 22 23 24 30 35 36 37 38 41 42 44 45 47 48
    function_def (53)
        on left: 39
        on right: 3
    function_call (54)
        on left: 40
        on right: 19
    param_list (55)
        on left: 41 42 43
        on right: 39 42
    arg_list (56)
        on left: 44 45 46
        on right: 40 45
    switch_case (57)
        on left: 47
        on right: 9
    case_list (58)
        on left: 48 49 50
        on right: 47 48


State 0

    0 $accept: • START $end

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    START               go to state 10
    global_declaration  go to state 11
    block               go to state 12
    statements          go to state 13
    statement           go to state 14
    declaration         go to state 15
    assignment          go to state 16
    types               go to state 17
    function_def        go to state 18
    function_call       go to state 19


State 1

   24 assignment: T_IDENTIFIER • T_EQUAL expression
   40 function_call: T_IDENTIFIER • T_LPAREN arg_list T_RPAREN

    T_EQUAL   shift, and go to state 20
    T_LPAREN  shift, and go to state 21


State 2

   21 statement: T_SENDBACK • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 26


State 3

   22 statement: T_THROWUP • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 27


State 4

    5 block: T_GO • control_block T_ALL_SET

    T_IMAGINE     shift, and go to state 28
    T_ONE_BY_ONE  shift, and go to state 29
    T_AS_LONG_AS  shift, and go to state 30
    T_CHECK       shift, and go to state 31

    control_block  go to state 32
    if_block       go to state 33
    while_block    go to state 34
    for_block      go to state 35
    switch_case    go to state 36


State 5

   39 function_def: T_A_NEW_ONE • types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    $default  reduce using rule 25 (types)

    types  go to state 37


State 6

   29 types: T_ZIP_TYPE •

    $default  reduce using rule 29 (types)


State 7

   26 types: T_WHOLEY_TYPE •

    $default  reduce using rule 26 (types)


State 8

   27 types: T_FLOATY_TYPE •

    $default  reduce using rule 27 (types)


State 9

   28 types: T_STRING_TYPE •

    $default  reduce using rule 28 (types)


State 10

    0 $accept: START • $end
    2 START: START • global_declaration

    $end           shift, and go to state 38
    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    global_declaration  go to state 39
    block               go to state 12
    statements          go to state 13
    statement           go to state 14
    declaration         go to state 15
    assignment          go to state 16
    types               go to state 17
    function_def        go to state 18
    function_call       go to state 19


State 11

    1 START: global_declaration •

    $default  reduce using rule 1 (START)


State 12

   20 statement: block •

    $default  reduce using rule 20 (statement)


State 13

    4 global_declaration: statements •
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER   [reduce using rule 4 (global_declaration)]
    T_IDENTIFIER   [reduce using rule 25 (types)]
    T_SENDBACK     [reduce using rule 4 (global_declaration)]
    T_THROWUP      [reduce using rule 4 (global_declaration)]
    T_GO           [reduce using rule 4 (global_declaration)]
    T_ZIP_TYPE     [reduce using rule 4 (global_declaration)]
    T_WHOLEY_TYPE  [reduce using rule 4 (global_declaration)]
    T_FLOATY_TYPE  [reduce using rule 4 (global_declaration)]
    T_STRING_TYPE  [reduce using rule 4 (global_declaration)]
    $default       reduce using rule 4 (global_declaration)

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 14

   15 statements: statement • ';'

    ';'  shift, and go to state 41


State 15

   17 statement: declaration •

    $default  reduce using rule 17 (statement)


State 16

   18 statement: assignment •

    $default  reduce using rule 18 (statement)


State 17

   23 declaration: types • T_IDENTIFIER T_EQUAL expression

    T_IDENTIFIER  shift, and go to state 42


State 18

    3 global_declaration: function_def •

    $default  reduce using rule 3 (global_declaration)


State 19

   19 statement: function_call •

    $default  reduce using rule 19 (statement)


State 20

   24 assignment: T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 43


State 21

   40 function_call: T_IDENTIFIER T_LPAREN • arg_list T_RPAREN

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    $default  reduce using rule 46 (arg_list)

    expression  go to state 44
    arg_list    go to state 45


State 22

   31 expression: T_WHOLEY •

    $default  reduce using rule 31 (expression)


State 23

   32 expression: T_FLOATY •

    $default  reduce using rule 32 (expression)


State 24

   34 expression: T_IDENTIFIER •
   35           | T_IDENTIFIER • T_NEQUAL expression
   36           | T_IDENTIFIER • T_GEQUAL expression
   37           | T_IDENTIFIER • T_LEQUAL expression
   38           | T_IDENTIFIER • T_OPERATOR expression

    T_OPERATOR  shift, and go to state 46
    T_NEQUAL    shift, and go to state 47
    T_GEQUAL    shift, and go to state 48
    T_LEQUAL    shift, and go to state 49

    $default  reduce using rule 34 (expression)


State 25

   33 expression: T_STRING •

    $default  reduce using rule 33 (expression)


State 26

   21 statement: T_SENDBACK expression •

    $default  reduce using rule 21 (statement)


State 27

   22 statement: T_THROWUP expression •

    $default  reduce using rule 22 (statement)


State 28

   10 if_block: T_IMAGINE • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 50


State 29

   12 for_block: T_ONE_BY_ONE • T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 51


State 30

   11 while_block: T_AS_LONG_AS • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 52


State 31

   47 switch_case: T_CHECK • expression T_LCURPAR case_list T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 53


State 32

    5 block: T_GO control_block • T_ALL_SET

    T_ALL_SET  shift, and go to state 54


State 33

    6 control_block: if_block •

    $default  reduce using rule 6 (control_block)


State 34

    7 control_block: while_block •

    $default  reduce using rule 7 (control_block)


State 35

    8 control_block: for_block •

    $default  reduce using rule 8 (control_block)


State 36

    9 control_block: switch_case •

    $default  reduce using rule 9 (control_block)


State 37

   39 function_def: T_A_NEW_ONE types • T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 55


State 38

    0 $accept: START $end •

    $default  accept


State 39

    2 START: START global_declaration •

    $default  reduce using rule 2 (START)


State 40

   16 statements: statements statement • ';'

    ';'  shift, and go to state 56


State 41

   15 statements: statement ';' •

    $default  reduce using rule 15 (statements)


State 42

   23 declaration: types T_IDENTIFIER • T_EQUAL expression

    T_EQUAL  shift, and go to state 57


State 43

   24 assignment: T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 24 (assignment)


State 44

   44 arg_list: expression •

    $default  reduce using rule 44 (arg_list)


State 45

   40 function_call: T_IDENTIFIER T_LPAREN arg_list • T_RPAREN
   45 arg_list: arg_list • T_COMMA expression

    T_RPAREN  shift, and go to state 58
    T_COMMA   shift, and go to state 59


State 46

   38 expression: T_IDENTIFIER T_OPERATOR • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 60


State 47

   35 expression: T_IDENTIFIER T_NEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 61


State 48

   36 expression: T_IDENTIFIER T_GEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 62


State 49

   37 expression: T_IDENTIFIER T_LEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 63


State 50

   10 if_block: T_IMAGINE T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    condition   go to state 64
    expression  go to state 65


State 51

   12 for_block: T_ONE_BY_ONE T_LPAREN • T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 66


State 52

   11 while_block: T_AS_LONG_AS T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    condition   go to state 67
    expression  go to state 65


State 53

   47 switch_case: T_CHECK expression • T_LCURPAR case_list T_RCURPAR

    T_LCURPAR  shift, and go to state 68


State 54

    5 block: T_GO control_block T_ALL_SET •

    $default  reduce using rule 5 (block)


State 55

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER • T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 69


State 56

   16 statements: statements statement ';' •

    $default  reduce using rule 16 (statements)


State 57

   23 declaration: types T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 70


State 58

   40 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN •

    $default  reduce using rule 40 (function_call)


State 59

   45 arg_list: arg_list T_COMMA • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 71


State 60

   38 expression: T_IDENTIFIER T_OPERATOR expression •

    $default  reduce using rule 38 (expression)


State 61

   35 expression: T_IDENTIFIER T_NEQUAL expression •

    $default  reduce using rule 35 (expression)


State 62

   36 expression: T_IDENTIFIER T_GEQUAL expression •

    $default  reduce using rule 36 (expression)


State 63

   37 expression: T_IDENTIFIER T_LEQUAL expression •

    $default  reduce using rule 37 (expression)


State 64

   10 if_block: T_IMAGINE T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 72


State 65

   30 condition: expression •

    $default  reduce using rule 30 (condition)


State 66

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER • T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IN  shift, and go to state 73


State 67

   11 while_block: T_AS_LONG_AS T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 74


State 68

   47 switch_case: T_CHECK expression T_LCURPAR • case_list T_RCURPAR

    T_DEFAULT  shift, and go to state 75

    $default  reduce using rule 50 (case_list)

    case_list  go to state 76


State 69

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN • param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    $default  reduce using rule 43 (param_list)

    expression  go to state 77
    param_list  go to state 78


State 70

   23 declaration: types T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 23 (declaration)


State 71

   45 arg_list: arg_list T_COMMA expression •

    $default  reduce using rule 45 (arg_list)


State 72

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 79


State 73

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN • T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 80


State 74

   11 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 81


State 75

   49 case_list: T_DEFAULT • T_COLON statements

    T_COLON  shift, and go to state 82


State 76

   47 switch_case: T_CHECK expression T_LCURPAR case_list • T_RCURPAR
   48 case_list: case_list • T_IS expression T_COLON statements

    T_RCURPAR  shift, and go to state 83
    T_IS       shift, and go to state 84


State 77

   41 param_list: expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 85


State 78

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list • T_RPAREN T_LCURPAR statements T_RCURPAR
   42 param_list: param_list • T_COMMA expression T_IDENTIFIER

    T_RPAREN  shift, and go to state 86
    T_COMMA   shift, and go to state 87


State 79

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 88
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 80

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN • expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 89


State 81

   11 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 90
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 82

   49 case_list: T_DEFAULT T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 91
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 83

   47 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR •

    $default  reduce using rule 47 (switch_case)


State 84

   48 case_list: case_list T_IS • expression T_COLON statements

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 92


State 85

   41 param_list: expression T_IDENTIFIER •

    $default  reduce using rule 41 (param_list)


State 86

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 93


State 87

   42 param_list: param_list T_COMMA • expression T_IDENTIFIER

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 94


State 88

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 95
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 89

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression • optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    ','  shift, and go to state 96

    $default  reduce using rule 14 (optional_step)

    optional_step  go to state 97


State 90

   11 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 98
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 91

   16 statements: statements • statement ';'
   49 case_list: T_DEFAULT T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]
    $default      reduce using rule 49 (case_list)

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 92

   48 case_list: case_list T_IS expression • T_COLON statements

    T_COLON  shift, and go to state 99


State 93

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 100
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 94

   42 param_list: param_list T_COMMA expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 101


State 95

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR • T_NAH T_LCURPAR statements T_RCURPAR

    T_NAH  shift, and go to state 102


State 96

   13 optional_step: ',' • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 103


State 97

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step • T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 104


State 98

   11 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 11 (while_block)


State 99

   48 case_list: case_list T_IS expression T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 105
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 100

   16 statements: statements • statement ';'
   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements • T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 106
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 101

   42 param_list: param_list T_COMMA expression T_IDENTIFIER •

    $default  reduce using rule 42 (param_list)


State 102

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 107


State 103

   13 optional_step: ',' expression •

    $default  reduce using rule 13 (optional_step)


State 104

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 108


State 105

   16 statements: statements • statement ';'
   48 case_list: case_list T_IS expression T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]
    $default      reduce using rule 48 (case_list)

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 106

   39 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 39 (function_def)


State 107

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 109
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 108

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 110


State 109

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 111
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 110

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statements     go to state 112
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 111

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 10 (if_block)


State 112

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements • T_RCURPAR
   16 statements: statements • statement ';'

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 113
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 25 (types)]

    block          go to state 12
    statement      go to state 40
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 113

   12 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 12 (for_block)
