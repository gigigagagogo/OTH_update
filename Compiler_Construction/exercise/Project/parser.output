State 0 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 85 conflicts: 1 shift/reduce
State 86 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 95 conflicts: 1 shift/reduce
State 97 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 104 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce


Grammar

    0 $accept: START $end

    1 START: global_declaration
    2      | START global_declaration

    3 global_declaration: function_def
    4                   | statements ';'

    5 block: T_GO control_block T_ALL_SET

    6 control_block: if_block
    7              | while_block
    8              | for_block
    9              | switch_case

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

   14 optional_step: ',' expression
   15              | ε

   16 statements: statement
   17           | statements statement

   18 statement: declaration ';'
   19          | assignment ';'
   20          | function_call ';'
   21          | block
   22          | T_SENDBACK expression ';'
   23          | T_THROWUP expression ';'

   24 declaration: types T_IDENTIFIER T_EQUAL expression

   25 assignment: T_IDENTIFIER T_EQUAL expression

   26 types: ε
   27      | T_WHOLEY_TYPE
   28      | T_FLOATY_TYPE
   29      | T_STRING_TYPE
   30      | T_ZIP_TYPE

   31 condition: expression

   32 expression: T_WHOLEY
   33           | T_FLOATY
   34           | T_STRING
   35           | T_IDENTIFIER
   36           | T_IDENTIFIER T_NEQUAL expression
   37           | T_IDENTIFIER T_GEQUAL expression
   38           | T_IDENTIFIER T_LEQUAL expression
   39           | T_IDENTIFIER T_OPERATOR expression

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

   41 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN

   42 param_list: expression T_IDENTIFIER
   43           | param_list T_COMMA expression T_IDENTIFIER
   44           | ε

   45 arg_list: expression
   46         | arg_list T_COMMA expression
   47         | ε

   48 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR

   49 case_list: case_list T_IS expression T_COLON statements
   50          | T_DEFAULT T_COLON statements
   51          | ε


Terminals, with rules where they appear

    $end (0) 0
    ',' (44) 14
    ';' (59) 4 18 19 20 22 23
    error (256)
    T_WHOLEY <num> (258) 32
    T_FLOATY <fnum> (259) 33
    T_IDENTIFIER (260) 13 24 25 35 36 37 38 39 40 41 42 43
    T_OPERATOR (261) 39
    T_STRING <str> (262) 34
    T_SENDBACK <str> (263) 22
    T_THROWUP <str> (264) 23
    T_GO <str> (265) 5
    T_ALL_SET <str> (266) 5
    T_IMAGINE <str> (267) 10 11
    T_NAH <str> (268) 11
    T_ONE_BY_ONE <str> (269) 13
    T_AS_LONG_AS <str> (270) 12
    T_EQUAL <str> (271) 24 25
    T_NEQUAL <str> (272) 36
    T_GEQUAL <str> (273) 37
    T_LEQUAL <str> (274) 38
    T_IN <str> (275) 13
    T_LPAREN <str> (276) 10 11 12 13 40 41
    T_RPAREN <str> (277) 10 11 12 13 40 41
    T_LCURPAR <str> (278) 10 11 12 13 40 48
    T_RCURPAR <str> (279) 10 11 12 13 40 48
    T_A_NEW_ONE <str> (280) 40
    T_ZIP_TYPE <str> (281) 30
    T_CHECK <str> (282) 48
    T_IS <str> (283) 49
    T_COLON <str> (284) 49 50
    T_DEFAULT <str> (285) 50
    T_COMMA <str> (286) 43 46
    T_WHOLEY_TYPE <str> (287) 27
    T_FLOATY_TYPE <str> (288) 28
    T_STRING_TYPE <str> (289) 29


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    START (38)
        on left: 1 2
        on right: 0 2
    global_declaration (39)
        on left: 3 4
        on right: 1 2
    block (40)
        on left: 5
        on right: 21
    control_block (41)
        on left: 6 7 8 9
        on right: 5
    if_block (42)
        on left: 10 11
        on right: 6
    while_block (43)
        on left: 12
        on right: 7
    for_block (44)
        on left: 13
        on right: 8
    optional_step (45)
        on left: 14 15
        on right: 13
    statements <ast> (46)
        on left: 16 17
        on right: 4 10 11 12 13 17 40 49 50
    statement <ast> (47)
        on left: 18 19 20 21 22 23
        on right: 16 17
    declaration (48)
        on left: 24
        on right: 18
    assignment (49)
        on left: 25
        on right: 19
    types <ast> (50)
        on left: 26 27 28 29 30
        on right: 24 40
    condition (51)
        on left: 31
        on right: 10 11 12
    expression <ast> (52)
        on left: 32 33 34 35 36 37 38 39
        on right: 13 14 22 23 24 25 31 36 37 38 39 42 43 45 46 48 49
    function_def (53)
        on left: 40
        on right: 3
    function_call (54)
        on left: 41
        on right: 20
    param_list (55)
        on left: 42 43 44
        on right: 40 43
    arg_list (56)
        on left: 45 46 47
        on right: 41 46
    switch_case (57)
        on left: 48
        on right: 9
    case_list (58)
        on left: 49 50 51
        on right: 48 49


State 0

    0 $accept: • START $end

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    START               go to state 10
    global_declaration  go to state 11
    block               go to state 12
    statements          go to state 13
    statement           go to state 14
    declaration         go to state 15
    assignment          go to state 16
    types               go to state 17
    function_def        go to state 18
    function_call       go to state 19


State 1

   25 assignment: T_IDENTIFIER • T_EQUAL expression
   41 function_call: T_IDENTIFIER • T_LPAREN arg_list T_RPAREN

    T_EQUAL   shift, and go to state 20
    T_LPAREN  shift, and go to state 21


State 2

   22 statement: T_SENDBACK • expression ';'

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 26


State 3

   23 statement: T_THROWUP • expression ';'

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 27


State 4

    5 block: T_GO • control_block T_ALL_SET

    T_IMAGINE     shift, and go to state 28
    T_ONE_BY_ONE  shift, and go to state 29
    T_AS_LONG_AS  shift, and go to state 30
    T_CHECK       shift, and go to state 31

    control_block  go to state 32
    if_block       go to state 33
    while_block    go to state 34
    for_block      go to state 35
    switch_case    go to state 36


State 5

   40 function_def: T_A_NEW_ONE • types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    $default  reduce using rule 26 (types)

    types  go to state 37


State 6

   30 types: T_ZIP_TYPE •

    $default  reduce using rule 30 (types)


State 7

   27 types: T_WHOLEY_TYPE •

    $default  reduce using rule 27 (types)


State 8

   28 types: T_FLOATY_TYPE •

    $default  reduce using rule 28 (types)


State 9

   29 types: T_STRING_TYPE •

    $default  reduce using rule 29 (types)


State 10

    0 $accept: START • $end
    2 START: START • global_declaration

    $end           shift, and go to state 38
    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_A_NEW_ONE    shift, and go to state 5
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    global_declaration  go to state 39
    block               go to state 12
    statements          go to state 13
    statement           go to state 14
    declaration         go to state 15
    assignment          go to state 16
    types               go to state 17
    function_def        go to state 18
    function_call       go to state 19


State 11

    1 START: global_declaration •

    $default  reduce using rule 1 (START)


State 12

   21 statement: block •

    $default  reduce using rule 21 (statement)


State 13

    4 global_declaration: statements • ';'
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9
    ';'            shift, and go to state 40

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 14

   16 statements: statement •

    $default  reduce using rule 16 (statements)


State 15

   18 statement: declaration • ';'

    ';'  shift, and go to state 42


State 16

   19 statement: assignment • ';'

    ';'  shift, and go to state 43


State 17

   24 declaration: types • T_IDENTIFIER T_EQUAL expression

    T_IDENTIFIER  shift, and go to state 44


State 18

    3 global_declaration: function_def •

    $default  reduce using rule 3 (global_declaration)


State 19

   20 statement: function_call • ';'

    ';'  shift, and go to state 45


State 20

   25 assignment: T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 46


State 21

   41 function_call: T_IDENTIFIER T_LPAREN • arg_list T_RPAREN

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    $default  reduce using rule 47 (arg_list)

    expression  go to state 47
    arg_list    go to state 48


State 22

   32 expression: T_WHOLEY •

    $default  reduce using rule 32 (expression)


State 23

   33 expression: T_FLOATY •

    $default  reduce using rule 33 (expression)


State 24

   35 expression: T_IDENTIFIER •
   36           | T_IDENTIFIER • T_NEQUAL expression
   37           | T_IDENTIFIER • T_GEQUAL expression
   38           | T_IDENTIFIER • T_LEQUAL expression
   39           | T_IDENTIFIER • T_OPERATOR expression

    T_OPERATOR  shift, and go to state 49
    T_NEQUAL    shift, and go to state 50
    T_GEQUAL    shift, and go to state 51
    T_LEQUAL    shift, and go to state 52

    $default  reduce using rule 35 (expression)


State 25

   34 expression: T_STRING •

    $default  reduce using rule 34 (expression)


State 26

   22 statement: T_SENDBACK expression • ';'

    ';'  shift, and go to state 53


State 27

   23 statement: T_THROWUP expression • ';'

    ';'  shift, and go to state 54


State 28

   10 if_block: T_IMAGINE • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 55


State 29

   13 for_block: T_ONE_BY_ONE • T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 56


State 30

   12 while_block: T_AS_LONG_AS • T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 57


State 31

   48 switch_case: T_CHECK • expression T_LCURPAR case_list T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 58


State 32

    5 block: T_GO control_block • T_ALL_SET

    T_ALL_SET  shift, and go to state 59


State 33

    6 control_block: if_block •

    $default  reduce using rule 6 (control_block)


State 34

    7 control_block: while_block •

    $default  reduce using rule 7 (control_block)


State 35

    8 control_block: for_block •

    $default  reduce using rule 8 (control_block)


State 36

    9 control_block: switch_case •

    $default  reduce using rule 9 (control_block)


State 37

   40 function_def: T_A_NEW_ONE types • T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 60


State 38

    0 $accept: START $end •

    $default  accept


State 39

    2 START: START global_declaration •

    $default  reduce using rule 2 (START)


State 40

    4 global_declaration: statements ';' •

    $default  reduce using rule 4 (global_declaration)


State 41

   17 statements: statements statement •

    $default  reduce using rule 17 (statements)


State 42

   18 statement: declaration ';' •

    $default  reduce using rule 18 (statement)


State 43

   19 statement: assignment ';' •

    $default  reduce using rule 19 (statement)


State 44

   24 declaration: types T_IDENTIFIER • T_EQUAL expression

    T_EQUAL  shift, and go to state 61


State 45

   20 statement: function_call ';' •

    $default  reduce using rule 20 (statement)


State 46

   25 assignment: T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 25 (assignment)


State 47

   45 arg_list: expression •

    $default  reduce using rule 45 (arg_list)


State 48

   41 function_call: T_IDENTIFIER T_LPAREN arg_list • T_RPAREN
   46 arg_list: arg_list • T_COMMA expression

    T_RPAREN  shift, and go to state 62
    T_COMMA   shift, and go to state 63


State 49

   39 expression: T_IDENTIFIER T_OPERATOR • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 64


State 50

   36 expression: T_IDENTIFIER T_NEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 65


State 51

   37 expression: T_IDENTIFIER T_GEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 66


State 52

   38 expression: T_IDENTIFIER T_LEQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 67


State 53

   22 statement: T_SENDBACK expression ';' •

    $default  reduce using rule 22 (statement)


State 54

   23 statement: T_THROWUP expression ';' •

    $default  reduce using rule 23 (statement)


State 55

   10 if_block: T_IMAGINE T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    condition   go to state 68
    expression  go to state 69


State 56

   13 for_block: T_ONE_BY_ONE T_LPAREN • T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER  shift, and go to state 70


State 57

   12 while_block: T_AS_LONG_AS T_LPAREN • condition T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    condition   go to state 71
    expression  go to state 69


State 58

   48 switch_case: T_CHECK expression • T_LCURPAR case_list T_RCURPAR

    T_LCURPAR  shift, and go to state 72


State 59

    5 block: T_GO control_block T_ALL_SET •

    $default  reduce using rule 5 (block)


State 60

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER • T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 73


State 61

   24 declaration: types T_IDENTIFIER T_EQUAL • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 74


State 62

   41 function_call: T_IDENTIFIER T_LPAREN arg_list T_RPAREN •

    $default  reduce using rule 41 (function_call)


State 63

   46 arg_list: arg_list T_COMMA • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 75


State 64

   39 expression: T_IDENTIFIER T_OPERATOR expression •

    $default  reduce using rule 39 (expression)


State 65

   36 expression: T_IDENTIFIER T_NEQUAL expression •

    $default  reduce using rule 36 (expression)


State 66

   37 expression: T_IDENTIFIER T_GEQUAL expression •

    $default  reduce using rule 37 (expression)


State 67

   38 expression: T_IDENTIFIER T_LEQUAL expression •

    $default  reduce using rule 38 (expression)


State 68

   10 if_block: T_IMAGINE T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 76


State 69

   31 condition: expression •

    $default  reduce using rule 31 (condition)


State 70

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER • T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_IN  shift, and go to state 77


State 71

   12 while_block: T_AS_LONG_AS T_LPAREN condition • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 78


State 72

   48 switch_case: T_CHECK expression T_LCURPAR • case_list T_RCURPAR

    T_DEFAULT  shift, and go to state 79

    $default  reduce using rule 51 (case_list)

    case_list  go to state 80


State 73

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN • param_list T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    $default  reduce using rule 44 (param_list)

    expression  go to state 81
    param_list  go to state 82


State 74

   24 declaration: types T_IDENTIFIER T_EQUAL expression •

    $default  reduce using rule 24 (declaration)


State 75

   46 arg_list: arg_list T_COMMA expression •

    $default  reduce using rule 46 (arg_list)


State 76

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 83


State 77

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN • T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_LPAREN  shift, and go to state 84


State 78

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 85


State 79

   50 case_list: T_DEFAULT • T_COLON statements

    T_COLON  shift, and go to state 86


State 80

   48 switch_case: T_CHECK expression T_LCURPAR case_list • T_RCURPAR
   49 case_list: case_list • T_IS expression T_COLON statements

    T_RCURPAR  shift, and go to state 87
    T_IS       shift, and go to state 88


State 81

   42 param_list: expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 89


State 82

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list • T_RPAREN T_LCURPAR statements T_RCURPAR
   43 param_list: param_list • T_COMMA expression T_IDENTIFIER

    T_RPAREN  shift, and go to state 90
    T_COMMA   shift, and go to state 91


State 83

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 92
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 84

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN • expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 93


State 85

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 94
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 86

   50 case_list: T_DEFAULT T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 95
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 87

   48 switch_case: T_CHECK expression T_LCURPAR case_list T_RCURPAR •

    $default  reduce using rule 48 (switch_case)


State 88

   49 case_list: case_list T_IS • expression T_COLON statements

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 96


State 89

   42 param_list: expression T_IDENTIFIER •

    $default  reduce using rule 42 (param_list)


State 90

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 97


State 91

   43 param_list: param_list T_COMMA • expression T_IDENTIFIER

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 98


State 92

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 99
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 93

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression • optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    ','  shift, and go to state 100

    $default  reduce using rule 15 (optional_step)

    optional_step  go to state 101


State 94

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 102
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 95

   17 statements: statements • statement
   50 case_list: T_DEFAULT T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]
    $default      reduce using rule 50 (case_list)

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 96

   49 case_list: case_list T_IS expression • T_COLON statements

    T_COLON  shift, and go to state 103


State 97

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 104
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 98

   43 param_list: param_list T_COMMA expression • T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 105


State 99

   10 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR •
   11         | T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR • T_NAH T_LCURPAR statements T_RCURPAR

    T_NAH  shift, and go to state 106

    $default  reduce using rule 10 (if_block)


State 100

   14 optional_step: ',' • expression

    T_WHOLEY      shift, and go to state 22
    T_FLOATY      shift, and go to state 23
    T_IDENTIFIER  shift, and go to state 24
    T_STRING      shift, and go to state 25

    expression  go to state 107


State 101

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step • T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 108


State 102

   12 while_block: T_AS_LONG_AS T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 12 (while_block)


State 103

   49 case_list: case_list T_IS expression T_COLON • statements

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 109
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 104

   17 statements: statements • statement
   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements • T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 110
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 105

   43 param_list: param_list T_COMMA expression T_IDENTIFIER •

    $default  reduce using rule 43 (param_list)


State 106

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 111


State 107

   14 optional_step: ',' expression •

    $default  reduce using rule 14 (optional_step)


State 108

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN • T_RPAREN T_LCURPAR statements T_RCURPAR

    T_RPAREN  shift, and go to state 112


State 109

   17 statements: statements • statement
   49 case_list: case_list T_IS expression T_COLON statements •

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]
    $default      reduce using rule 49 (case_list)

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 110

   40 function_def: T_A_NEW_ONE types T_IDENTIFIER T_LPAREN param_list T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 40 (function_def)


State 111

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 113
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 112

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN • T_LCURPAR statements T_RCURPAR

    T_LCURPAR  shift, and go to state 114


State 113

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 115
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 114

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR • statements T_RCURPAR

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statements     go to state 116
    statement      go to state 14
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 115

   11 if_block: T_IMAGINE T_LPAREN condition T_RPAREN T_LCURPAR statements T_RCURPAR T_NAH T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 11 (if_block)


State 116

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements • T_RCURPAR
   17 statements: statements • statement

    T_IDENTIFIER   shift, and go to state 1
    T_SENDBACK     shift, and go to state 2
    T_THROWUP      shift, and go to state 3
    T_GO           shift, and go to state 4
    T_RCURPAR      shift, and go to state 117
    T_ZIP_TYPE     shift, and go to state 6
    T_WHOLEY_TYPE  shift, and go to state 7
    T_FLOATY_TYPE  shift, and go to state 8
    T_STRING_TYPE  shift, and go to state 9

    T_IDENTIFIER  [reduce using rule 26 (types)]

    block          go to state 12
    statement      go to state 41
    declaration    go to state 15
    assignment     go to state 16
    types          go to state 17
    function_call  go to state 19


State 117

   13 for_block: T_ONE_BY_ONE T_LPAREN T_IDENTIFIER T_IN T_LPAREN expression optional_step T_RPAREN T_RPAREN T_LCURPAR statements T_RCURPAR •

    $default  reduce using rule 13 (for_block)
